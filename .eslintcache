[{"/mnt/c/Users/morag/Desktop/IU/Interfaces/src/index.js":"1","/mnt/c/Users/morag/Desktop/IU/Interfaces/src/reportWebVitals.js":"2","/mnt/c/Users/morag/Desktop/IU/Interfaces/src/App.js":"3","/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/Main.js":"4","/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/Background.js":"5","/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/Todolist.js":"6","/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/Count.js":"7","/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/Calendar.js":"8","/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/modal.js":"9"},{"size":517,"mtime":1609540925055,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1609540925056,"results":"12","hashOfConfig":"11"},{"size":1587,"mtime":1610159304518,"results":"13","hashOfConfig":"11"},{"size":5072,"mtime":1610135208073,"results":"14","hashOfConfig":"11"},{"size":682,"mtime":1609572805117,"results":"15","hashOfConfig":"11"},{"size":6299,"mtime":1610147323376,"results":"16","hashOfConfig":"11"},{"size":7950,"mtime":1610159310285,"results":"17","hashOfConfig":"11"},{"size":2749,"mtime":1610159306935,"results":"18","hashOfConfig":"11"},{"size":2590,"mtime":1610152988952,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"v7kdp6",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/mnt/c/Users/morag/Desktop/IU/Interfaces/src/index.js",[],["41","42"],"/mnt/c/Users/morag/Desktop/IU/Interfaces/src/reportWebVitals.js",[],"/mnt/c/Users/morag/Desktop/IU/Interfaces/src/App.js",[],"/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/Main.js",[],"/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/Background.js",[],"/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/Todolist.js",["43","44"],"import React, { Component } from \"react\";\r\n\r\nimport '../style/start.css';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { Done,Add} from \"@material-ui/icons\";\r\nimport { StylesProvider } from \"@material-ui/core/styles\";\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport { green} from '@material-ui/core/colors';\r\n\r\nimport {ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport { createMuiTheme} from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n      display: 'flex',\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      }\r\n      \r\n    },\r\n    \r\n    pink: {\r\n        '&:hover': {\r\n            backgroundColor: \"white\",\r\n            color: '#FFF'\r\n        },\r\n      color: theme.palette.getContrastText(\"#f50057\"),\r\n      backgroundColor: \"white\",\r\n    },\r\n  });\r\n\r\n\r\n\r\n  const theme = createMuiTheme({\r\n    typography: {\r\n      fontFamily: [\r\n        '-apple-system',\r\n        'BlinkMacSystemFont',\r\n        '\"Segoe UI\"',\r\n        'Roboto',\r\n        '\"Helvetica Neue\"',\r\n        'Oxygen',\r\n        'sans-serif',\r\n        'Ubuntu',\r\n        'Cantarell',\r\n        'Fira Sans',\r\n      ].join(','),\r\n    },\r\n    palette: {\r\n      primary: {\r\n        main:  '#FFF',\r\n      },\r\n      secondary: {\r\n        main: green[500],\r\n      },\r\n    },\r\n\r\n  });\r\n\r\n\r\n  const styleshy = {\r\n\r\n    largeIcon: {\r\n      width: 60,\r\n      height: 60,\r\n    },\r\n  \r\n  };\r\n\r\n\r\n\r\nclass Todolist extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.removeItem = this.removeItem.bind(this);\r\n        this.state = {\r\n            items:[],\r\n            text:\"\",\r\n        };\r\n\r\n    }\r\n    \r\n\r\n\r\n    addItem(e){\r\n        e.preventDefault();\r\n        if(this.state.text !== \"\"){\r\n\r\n            const newL = [this.state.text,...this.state.items]\r\n            this.setState({\r\n                items:newL,\r\n                text :\"\"\r\n            })\r\n     }\r\n    }\r\n\r\n    removeItem(e){\r\n       \r\n        let index = this.state.items.indexOf(e);\r\n        console.log(index);\r\n        const L = this.state.items;\r\n        L.splice(index,1);\r\n        this.setState({\r\n            text : this.state.text,\r\n            items:L\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    handleChange = (event) =>{\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        })\r\n    }\r\n\r\n    _handleKeyDown = (e) => {\r\n        if (e.key === 'Enter' && this.state.text !== \"\") {\r\n            const newL = [this.state.text,...this.state.items]\r\n            this.setState({\r\n                items:newL,\r\n                text :\"\"\r\n            })\r\n        }\r\n      }\r\n\r\n\r\n    render(){\r\n\r\n        const {classes} = this.props;\r\n        return(\r\n\r\n           \r\n                <div id=\"capaInf\">\r\n                    <div id = \"textFill\">\r\n\r\n                    <ThemeProvider theme={theme}>\r\n                            <TextField   onKeyDown={this._handleKeyDown} \r\n                             style = {{width: 430}}\r\n                            name = \"text\"\r\n                            value = {this.state.text}\r\n                            onChange = {this.handleChange}\r\n                            inputProps={{ maxLength: 14 }}\r\n                            id=\"outlined-basic\"\r\n                            label= {this.state.text === \"\" ?  \"Ingrese Tarea\" : \"\"}\r\n                            variant=\"outlined\"\r\n                            InputLabelProps = {{\r\n                              style:{color:\" #DB524D\"},shrink: false }}\r\n\r\n                            InputProps={{\r\n                                  style:{background:\"white\", color:\"#DB524D\"}\r\n                                  \r\n                              }}\r\n                            />\r\n                            </ThemeProvider>\r\n\r\n                       \r\n                                <Button  \r\n                                style = {{marginLeft:3}} className = {classes.pink}  onClick = {this.addItem}>\r\n                                <Add  style={{ fontSize: 40 }} ></Add>\r\n                           \r\n                             </Button>\r\n                      \r\n                         \r\n\r\n\r\n\r\n                    </div>\r\n                    <div id = \"listItem\">\r\n                        <List disablePadding = {true}>\r\n                        {this.state.items.map(x =>\r\n                            <ListItem   key = {x.key} disableGutters = {true}>\r\n                            <ListItemAvatar>\r\n                            <Avatar className={classes.pink}>\r\n                             <AssignmentIcon   style={{ color: \"#DB524D\" }}/>\r\n\r\n                        </Avatar>\r\n                      </ListItemAvatar>\r\n                      <ListItemText \r\n                        disableTypography\r\n                        primary={<Typography  type=\"body2\" style={{  fontSize:\"large\", color: '#FFFFFF' }}>{x}</Typography>}\r\n                      />\r\n                      <ListItemSecondaryAction>\r\n                        <StylesProvider injectFirst>\r\n                          <IconButton onClick = {() => this.removeItem(x)}>\r\n                            <Avatar className={classes.pink} >\r\n                              <DeleteIcon style={{ color: \"#DB524D\" }} ></DeleteIcon>\r\n                            </Avatar>\r\n                          </IconButton>\r\n                        </StylesProvider>\r\n                      </ListItemSecondaryAction>\r\n                      </ListItem>,\r\n                  )}\r\n                  </List>\r\n                </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles, { withTheme: true })(Todolist);\r\n","/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/Count.js",["45"],"/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/Calendar.js",["46"],"/mnt/c/Users/morag/Desktop/IU/Interfaces/src/components/modal.js",["47","48"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 ;\r\n  const left = 50 ;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    color: \"#FFFFFF\"\r\n  },\r\n\r\n  paper: {\r\n    position: 'absolute',\r\n    width: theme.spacing.unit * 50,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing.unit * 4,\r\n    outline: 'none',\r\n  },\r\n});\r\n\r\n\r\nconst WhiteTextTypography = withStyles({\r\n  root: {\r\n    color: \"#f50057\"\r\n  }\r\n})(Typography)\r\n\r\n\r\nclass SimpleModal extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            Open:this.props.isOpen,\r\n\r\n        };\r\n        console.log(\"asd\"+this.state.lista)\r\n        \r\n    }\r\n\r\n \r\n\r\n \r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { x } = this.props;\r\n\r\n    let numpom = this.props.nPom\r\n    let myComponent;\r\n    if(this.props.lista != null){\r\n      myComponent =   this.props.lista.map(x=><li>{x}</li>);\r\n    }else{\r\n      myComponent = \"\"\r\n    }\r\n    return (\r\n      <div>\r\n        \r\n        <Modal\r\n          aria-labelledby=\"simple-modal-title\"\r\n          aria-describedby=\"simple-modal-description\"\r\n          open={this.props.isOpen}\r\n          onClose={this.props.onCloseModal}\r\n        >\r\n          <div style={getModalStyle()} className={classes.paper}>\r\n            <Typography color = \"secondary\"  variant=\"h6\" id=\"modal-title\">\r\n              Pomodoro {numpom}\r\n            </Typography>\r\n       \r\n\r\n            <WhiteTextTypography variant=\"primary\">\r\n            {\r\n              <ul>\r\n                {myComponent}\r\n              </ul>\r\n              }\r\n      </WhiteTextTypography>\r\n\r\n            <div id = \"iz\">\r\n            <Button onClick={this.props.onCloseModal} variant=\"primary\">Cerrar</Button>\r\n\r\n\r\n            </div>\r\n          \r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSimpleModal.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\n// We need an intermediary variable for handling the recursive nesting.\r\nconst SimpleModalWrapped = withStyles(styles)(SimpleModal);\r\n\r\nexport default SimpleModalWrapped;",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":18,"column":10,"nodeType":"55","messageId":"56","endLine":18,"endColumn":14},{"ruleId":"53","severity":1,"message":"57","line":79,"column":9,"nodeType":"55","messageId":"56","endLine":79,"endColumn":17},{"ruleId":"53","severity":1,"message":"58","line":6,"column":8,"nodeType":"55","messageId":"56","endLine":6,"endColumn":13},{"ruleId":"53","severity":1,"message":"59","line":8,"column":8,"nodeType":"55","messageId":"56","endLine":8,"endColumn":14},{"ruleId":"53","severity":1,"message":"60","line":8,"column":10,"nodeType":"55","messageId":"56","endLine":8,"endColumn":14},{"ruleId":"53","severity":1,"message":"61","line":64,"column":13,"nodeType":"55","messageId":"56","endLine":64,"endColumn":14},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'Done' is defined but never used.","Identifier","unusedVar","'styleshy' is assigned a value but never used.","'Paper' is defined but never used.","'Button' is defined but never used.","'rand' is defined but never used.","'x' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]